<!-- TODO: MAKE THESE TREES DRAW FROM THE DATABSE -->
<div class="learn_block">
  <h2 class="sub_title">Tree - Data Type</h2>
  <p class="learn_text">A tree is a widely used abstract data type (ADT) or data structure implementing this ADT that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes.
  </p>

  <p class="learn_text">A tree data structure can be defined recursively (locally) as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the "children"), with the constraints that no reference is duplicated, and none points to the root.
  </p>
</div>

<div class="learn_block">
  <h2 class="sub_title">Binary Search Trees (BSTs)</h2>
  <p class="learn_text">A Binary Search Tree, sometimes also called an
    ordered or sorted binary tree, is a node-based binary tree data
    streucture where each node has a comporable key (and an associated value)
    and satisfies the restriction taht the key in any node is larger than the key in all nodes in the node's left sub-tree and smaller than the keys in all nodes in that node's right sub-tree.
  </p>
</div>

<div class="learn_block">
  <h2 class="sub_title">AVL Trees</h2>
  <p class="learn_text">An AVL tree is a self-balancing binary search tree. It was the first such data structure to be invented. In an AVL tree, the heights of the two child subtrees of any nodes differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this propery. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation.
  </p>
</div>

